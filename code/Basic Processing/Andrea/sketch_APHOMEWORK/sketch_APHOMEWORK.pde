int ufoX = 0;
int ufoY = 0;
int ufoWidth = 5;
int ufoHeight = 5;
PImage moon;
PImage sun;
PImage img;
boolean isCursorSun = false;

void setup() {
  size(1000, 500);
  // set up both images used in the file
  moon = loadImage("moon3.png");
  sun = loadImage("sun2.png");
  img = loadImage("mountain.png");
}

void draw() {
  // sets up the background to only cover half the screen
  image(img, 0, 250, width, height/2);
  noStroke(); 

  // set up for the background to be generated as a gradient based on the location of the mouse on the x & y direction
  for (int currentLocation = 0; currentLocation < mouseX; currentLocation+=20) {
    // establish a mapped color
    // R: based on currentLocation
    int r = int(map(currentLocation, 0, width, 0, 200));
    // G: based on mouseY
    int g = int(map(mouseY, 0, height, 0, 150));
    // B: based on how many frames have elapsed
    int b = int(map(frameCount % 300, 0, 300, 0, 224));

    // rect colour is generated by the r,g,b integers based on location
    //background(r, g, b);
    fill(r, g, b);
    // gradient only covers half the screen
    rect(0, 0, 1000, 250);
  }

  // if condition added in order to have the cursor to alternate between two images depending on its location on the x axis
  // boolean used as a suggestion from a friend on how to create true or false statements in order to have the cursos swithc back and forth as the function is called
  if (mouseX < 500 && isCursorSun == false) {
    // cursor becomes the sun when the mouse is on the left of the screen dimension
    cursor(sun, 0, 0);
    isCursorSun = true;
  } else if (mouseX > 500 && isCursorSun == true) {
    // cursor becomes the moon when the mouse is on the right (past the center) of the screen dimension
    cursor(moon, 0, 0);
    isCursorSun = false;
  }
}

void keyPressed()
{
  // this is the surprise UFO attack!
  // generates 2 random values which dictate the size of the elipse ufo following the sun and the moon
  float a = random(0, 255);
  float b = random(0, 255);
  fill (18, 240, 7);
  noStroke(); 
  ellipse(mouseX, mouseY, a, b);

  ufoX = 0;
  // while loop that creates a green sparkling grid on the sky everytime the ufo attacks
  // grid on the x axis
  while (ufoX < width)
  {
    rect(ufoX, 100, ufoWidth, ufoHeight);
    ufoX += ufoWidth;

    rect(ufoX, 200, ufoWidth, ufoHeight);
    ufoX += ufoWidth;

    rect(ufoX, 300, ufoWidth, ufoHeight);
    ufoX += ufoWidth;

    rect(ufoX, 400, ufoWidth, ufoHeight);
    ufoX += ufoWidth;


    ufoY = 0;
    // while loop that creates a green sparkling grid on the sky everytime the ufo attacks
    // grid on the y axis
    while (ufoY < height)
    {
      rect(100, ufoY, ufoWidth, ufoHeight);
      ufoY += ufoHeight;

      rect(200, ufoY, ufoWidth, ufoHeight);
      ufoY += ufoHeight;

      rect(300, ufoY, ufoWidth, ufoHeight);
      ufoY += ufoHeight;

      rect(400, ufoY, ufoWidth, ufoHeight);
      ufoY += ufoHeight;

      rect(500, ufoY, ufoWidth, ufoHeight);
      ufoY += ufoHeight;

      rect(600, ufoY, ufoWidth, ufoHeight);
      ufoY += ufoHeight;

      rect(700, ufoY, ufoWidth, ufoHeight);
      ufoY += ufoHeight;

      rect(800, ufoY, ufoWidth, ufoHeight);
      ufoY += ufoHeight;

      rect(900, ufoY, ufoWidth, ufoHeight);
      ufoY += ufoHeight;
    }
  }
}
